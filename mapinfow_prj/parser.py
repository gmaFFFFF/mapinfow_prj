import typing
from itertools import chain

from pyparsing import *

from .coordSys import *
from .reference import СкПараметрыXlsx


class MapinfowPrj:

    def __init__(self, mapinfow_prj: str) -> None:
        super().__init__()
        self._справочник_параметров = СкПараметрыXlsx()
        self._имена_лексем: dict[str, str] = dict()
        self._определить_имена_лексем()
        self._prj: str = mapinfow_prj
        self._описать_грамматику()

    def найти_ск(self, название_ск: typing.Optional[str],
                 название_группы: typing.Optional[str] = None) -> typing.Optional[СистемаКоординат]:
        """
        Находит систему координат

        :param название_ск: Название системы координат
        :param название_группы: Название группы, в которую входит система координат
        :return: объект типа СистемаКоординат
        """

        рез = [ск for ск in self[название_группы] if ск.название_ск == название_ск]
        return рез[0] if рез else None

    def __getitem__(self, группа_ск: typing.Optional[str]) -> typing.Generator[СистемаКоординат, None, None]:
        if группа_ск is not None and not isinstance(группа_ск, str):
            raise TypeError(f'{группа_ск=} может быть только str или None, но не {type(группа_ск).__name__}')

        ск = ((лексема, ск_имя, гр_имя)
              for лексемы in self._в_список_лексем()
              for гр_имя, ск_лексема in лексемы.items() if гр_имя == группа_ск
              for ск_имя, лексема in ск_лексема.items())

        for парам in ск:
            yield self._лексема_в_ск(*парам)

    def __iter__(self) -> typing.Generator[СистемаКоординат, None, None]:
        ск = ((лексема, ск_имя, гр_имя)
              for лексемы in self._в_список_лексем()
              for гр_имя, ск_лексема in лексемы.items()
              for ск_имя, лексема in ск_лексема.items())

        for парам in ск:
            yield self._лексема_в_ск(*парам)

    def _определить_имена_лексем(self):
        self._ск_код = None
        self._ск_имя = None
        self._аффин = None
        self._границы_ск = None
        self._проекция_тип = None
        self._датум = None
        self._датум_стандарт_номер = None
        self._датум_эллипс_номер = None
        self._датум_сдвиг = None
        self._датум_поворот = None
        self._датум_масштаб = None
        self._датум_осн_мерид = None
        self._единицы_изм = None
        self._проекция_параметры = None
        self._группа_ск_имя = None
        self._пр_мод_т: str = "проекция_тип_модификатор"
        self._пр_н_т: str = "проекция_тип_номер"

        self._имена_лексем |= {
            "self._ск_код": "ск_код",
            "self._ск_имя": "ск_имя",
            "self._аффин": "аффин",
            "self._границы_ск": "границы",
            "self._проекция_тип": "проекция_тип",
            "self._датум": "датум",
            "self._датум_стандарт_номер": "датум_номер",
            "self._датум_эллипс_номер": "датум_эллипс_номер",
            "self._датум_сдвиг": "датум_сдвиг",
            "self._датум_поворот": "датум_поворот",
            "self._датум_масштаб": "датум_масштаб_ppm",
            "self._датум_осн_мерид": "датум_осн_мерид",
            "self._единицы_изм": "ед_изм",
            "self._проекция_параметры": "проекция",
            "self._группа_ск_имя": "группа_имя",
            self._пр_мод_т: "проекция_модификатор",
            self._пр_н_т: "проекция_номер"
        }

    def _описать_грамматику(self):
        и = self._имена_лексем  # Для сокращения ввода названий результатов лексического анализа

        # Базовые лексемы
        self._число = pyparsing_common.fnumber()
        self._число_целое = pyparsing_common.integer()
        self._разделитель = Opt(Literal(",")).suppress().set_name(",")
        self._разделитель_обяз = Literal(",").suppress().set_name(",")
        self._кавычка = Literal('"').suppress()

        # Описание грамматики файла mapinfow.prj в комментариях не будет учитывать пробелы
        # и символ разделитель элементов - запятую.
        #
        # Файл Mapinfow.prj ::= {<Группа систем координат>}
        # Группа систем координат ::= " <Имя> ", {\n <СК>}
        # СК ::= <СК имя>, <Тип проекции>, <Датум>, [<Проекция>], [<Аффинное преобразование>], [<Границы СК>]

        # СК имя ::= " <Имя> [\p <код>] " | " <Имя> "
        self._ск_код = Literal("\\p").suppress() - self._число_целое(и["self._ск_код"])
        self._ск_имя_и_код = (self._кавычка + Regex('(?<=").+(?=\\\\p)') + self._ск_код - self._кавычка)
        self._ск_имя_без_кода = QuotedString('"')
        self._ск_имя = self._ск_имя_и_код | self._ск_имя_без_кода
        self._ск_имя = self._ск_имя.set_name(и["self._ск_имя"])

        # Аффинное преобразование ::= <A> , <B> , <C> , <D>, <E> , <F>
        self._аффин = (self._число - self._разделитель_обяз) * 5 - self._число
        self._аффин = self._аффин.set_results_name(и["self._аффин"])
        # Границы СК ::= <Xmin> , <Ymin> , <Xmax> , <Ymax>
        self._границы_ск = (self._число - self._разделитель_обяз) * 3 - self._число
        self._границы_ск = self._границы_ск.set_results_name(и["self._границы_ск"])

        # Тип проекции ::= <Модификатор проекции + Номер типа проекции>
        # Модификатор проекции ::= 0 | 1000 | 2000 | 3000
        # Модификатор проекции определяет наличие/отсутствие Аффинного преобразования и Границы СК
        self._афин_границы = Forward("<Предпросмотр афин или границы>")
        афин_и_или_границ = {
            0: FollowedBy(LineEnd()),
            1000: self._разделитель_обяз - self._аффин - FollowedBy(LineEnd()),
            2000: self._разделитель_обяз - self._границы_ск - FollowedBy(LineEnd()),
            3000: self._разделитель_обяз - self._аффин - self._разделитель_обяз - self._границы_ск - FollowedBy(
                LineEnd())
        }

        def вычленить_модификатор(тип_проекции: ParseResults) -> dict[str, int]:
            проекция_модиф = (тип_проекции[0] // 1_000) * 1_000
            проекция_код = тип_проекции[0] % 1_000
            return {и[self._пр_мод_т]: проекция_модиф, и[self._пр_н_т]: проекция_код}

        def установка_разбора_афин_или_границы(тип_проекции: list[dict[str, int]]):
            self._афин_границы <<= афин_и_или_границ[тип_проекции[0][и[self._пр_мод_т]]]

        self._проекция_тип = self._число_целое(и["self._проекция_тип"])
        # После определения типа проекции вычисляем наличие границ и/или аффинного преобразования
        self._проекция_тип.add_parse_action(вычленить_модификатор, установка_разбора_афин_или_границы)

        # Датум ::= <Датум стандартный> | <Датум пользовательский>
        # Датум пользовательский ::= 9999 | 999, <Эллипсоид>, <Сдвиг>, <Поворот>, <Масштаб>, <Основной меридиан>
        self._датум_стандарт_номер = self._число_целое(и["self._датум_стандарт_номер"])
        self._датум_эллипс_номер = self._число_целое(и["self._датум_эллипс_номер"])
        self._датум_сдвиг = (self._число - self._разделитель_обяз) * 2 - self._число
        self._датум_сдвиг = self._датум_сдвиг.set_results_name(и["self._датум_сдвиг"])
        self._датум_поворот = self._датум_сдвиг(и["self._датум_поворот"])
        self._датум_масштаб = self._число(и["self._датум_масштаб"])
        self._датум_осн_мерид = self._число(и["self._датум_осн_мерид"])

        self._датум_польз3 = self._датум_эллипс_номер - self._разделитель_обяз - self._датум_сдвиг
        self._датум_польз7 = self._датум_польз3 - self._разделитель_обяз - \
                             self._датум_поворот - self._разделитель_обяз - \
                             self._датум_масштаб - self._разделитель_обяз - \
                             self._датум_осн_мерид

        self._датум_польз = (Literal("9999").suppress() ^ Literal("999").suppress()) - self._разделитель_обяз - \
                            (self._датум_польз3 ^ (~FollowedBy(self._афин_границы) + (self._датум_польз7)))

        self._датум = Group(self._датум_польз ^ self._датум_стандарт_номер)
        self._датум = self._датум.set_results_name(и["self._датум"])

        # Проекция ::= <Единица измерения>, {<Параметры проекции>}
        self._единицы_изм = self._число_целое(и["self._единицы_изм"])
        self._проекция_параметр = self._разделитель_обяз + self._число
        # Количество параметров проекции зависит от её типа
        self._проекция_параметры = Forward()

        def определить_число_параметров_проекции(тп: [list[dict[str, int]]]):
            код_проекции = тп[0][и[self._пр_н_т]]
            try:
                пр = [пр for пр in self._справочник_параметров.дай_проекции() if пр.код == код_проекции][0]
            except:
                self._проекция_параметры <<= ZeroOrMore(self._проекция_параметр, stop_on=self._афин_границы)
            else:
                n = пр.число_парам
                self._проекция_параметры <<= self._проекция_параметр * n

        self._проекция_тип.add_parse_action(определить_число_параметров_проекции)

        self._проекция_параметры = self._проекция_параметры.set_results_name(и["self._проекция_параметры"])
        self._проекция = ~FollowedBy(
            self._афин_границы) + self._разделитель_обяз + self._единицы_изм + self._проекция_параметры

        self._ск = Dict(Group((self._ск_имя + self._разделитель_обяз
                               - self._проекция_тип - self._разделитель_обяз
                               - self._датум
                               - Opt(self._проекция)
                               - self._афин_границы)))

        # Группа систем координат ::= " <Имя> ", {\n <СК>}
        self._группа_ск_имя = FollowedBy(QuotedString('"') + ~FollowedBy(self._разделитель_обяз)) + QuotedString('"')
        self._группа_ск_имя = self._группа_ск_имя.set_name(и["self._группа_ск_имя"])
        self._группа_ск = Dict(
            Group(Opt(self._группа_ск_имя, None) + OneOrMore(self._ск(), stop_on=self._группа_ск_имя)))

    def _в_список_лексем_без_групп_ск(self):
        """ возвращает список систем координат
        >>> for рез in MapinfowPrj('"Равноплощадная проекция Мольвейде", 13, 62, 7, 0')._в_список_лексем_без_групп_ск():
        ...     print(рез.as_dict())
        {'Равноплощадная проекция Мольвейде': {'проекция_тип': {'проекция_модификатор': 0, 'проекция_номер': 13}, 'датум': {'датум_номер': 62}, 'ед_изм': 7, 'проекция': [0.0]}}

        :return: Сведения о системах координат
        """
        for результат, _, _ in self._ск.scan_string(self._prj):
            yield результат

    def _в_список_лексем(self):
        """
        Возвращает список систем координат по группам

        :return: Сведения о системах координат сгруппированные
        """
        for результат, _, _ in self._группа_ск.scan_string(self._prj):
            yield результат

    def _лексема_в_ск(self, лексема, название_ск: typing.Optional[str],
                      название_группы: typing.Optional[str] = None) -> СистемаКоординат:
        """
        Преобразовывает лексемы, описывающие систему координат
        в объектное представление системы координат

        :param лексема: Лексемы, описывающие систему координат без ее названия и группы
        :param название_ск: Название системы координат
        :param название_группы: Название группы, в которую входит система координат
        :return: объект типа СистемаКоординат
        """

        # Помощники для работы с лексемами
        и = self._имена_лексем
        дай_ск_парам = lambda ключ: лексема.get(и[ключ])
        дай_датум_парам = lambda ключ: дай_ск_парам("self._датум").get(и[ключ])
        # Помощники для извлечения параметров проекций MapInfo из справочника
        дай_эллипсоид = lambda код: [э for э in self._справочник_параметров.дай_эллипсоиды() if э.код == код][0]
        дай_датум = lambda код: [д for д in self._справочник_параметров.дай_датумы() if д.код == код][0]
        дай_единицу_изм = lambda код: [е for е in self._справочник_параметров.дай_ед_изм() if е.код == код][0]
        дай_проекцию = lambda код: [п for п in self._справочник_параметров.дай_проекции() if п.код == код][0]

        # Извлекаем лексемы из словаря (для удобства)
        датум_стандарт = дай_датум_парам("self._датум_стандарт_номер")
        if датум_стандарт is None:
            эллипсоид_ид = дай_датум_парам("self._датум_эллипс_номер")
            датум_сдвиг = дай_датум_парам("self._датум_сдвиг")
            датум_поворот = д if (д := дай_датум_парам("self._датум_поворот")) is not None else []

            # В ГОСТ 32453-2017 и MapInfo Pro используется формула "Поворот координатной системы".
            # А в ISO 19111 и в библиотеке Proj (ранее Proj.4) используется "Преобразование радиуса-вектора".
            # Таким образом, чтобы использовать параметры датумов ГОСТ и MapInfo в Proj требуется изменить
            # знаки у параметров поворота ωx, ωy, ωz.
            # Источник: https://mapinfo.ru/articles/gost
            датум_поворот = [-r for r in датум_поворот]
            датум_масштаб = дай_датум_парам("self._датум_масштаб")
            датум_осн_мерид = дай_датум_парам("self._датум_осн_мерид")
        проекция_номер = дай_ск_парам("self._проекция_тип")[и[self._пр_н_т]]
        проекция_модиф = дай_ск_парам("self._проекция_тип").get(и[self._пр_мод_т])
        афин_ли = True if проекция_модиф in (1000, 3000) else False
        границы_ли = True if проекция_модиф in (2000, 3000) else False
        единицы = дай_ск_парам("self._единицы_изм")
        проекция_парам = дай_ск_парам("self._проекция_параметры")
        афин_парам = дай_ск_парам("self._аффин") if афин_ли else None
        границы_парам = дай_ск_парам("self._границы_ск") if границы_ли else None

        # Помощники описания систем координат
        датум_парам2prj_str = lambda сдвиг, поворот, масштаб, мерид: \
            f'+towgs84={",".join(str(п) for п in chain(сдвиг, поворот, ([масштаб] if масштаб is not None else [])))}' + (
                f' +pm={str(мерид)}' if мерид not in (0, None) else '')

        # Описание системы координат
        эллипс = Эллипсоид(дай_эллипсоид(эллипсоид_ид).proj
                           if датум_стандарт is None else дай_датум(датум_стандарт).ellps)
        датум = Датум(
            f"{датум_парам2prj_str(датум_сдвиг, датум_поворот, датум_масштаб, датум_осн_мерид)} {эллипс.proj_стр}"
            if датум_стандарт is None else дай_датум(датум_стандарт).proj)

        проекция = Проекция(дай_проекцию(проекция_номер)
                            .proj_format
                            .format(*(chain(проекция_парам, дай_единицу_изм(единицы).proj_code)
                                      if проекция_парам is not None else [])
                                    )
                            )
        афин = АффинноеПреобразование(*афин_парам) if афин_парам is not None else None
        границы = ГраницыСистемыКоординат(*границы_парам) if границы_парам is not None else None
        код = дай_ск_парам("self._ск_код")

        return СистемаКоординат(название_группы, название_ск, код, датум, проекция, афин, границы)
